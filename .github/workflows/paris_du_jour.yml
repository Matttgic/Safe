name: Générer Paris du Jour UltraSafe

on:
  workflow_dispatch:
    inputs:
      matchs_source:
        description: "Source des matchs (existing/test/api)"
        required: true
        default: "existing"
        type: choice
        options:
          - existing
          - test
          - api
      seuils_custom:
        description: "Seuils custom en JSON (optionnel)"
        required: false
        type: string
      debug_mode:
        description: "Mode debug verbose"
        required: false
        default: false
        type: boolean
  schedule:
    # Exécution automatique chaque jour à 8h UTC
    - cron: '0 8 * * *'

jobs:
  generer_paris:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: Configuration de Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Installer les dépendances
        run: |
          python -m pip install --upgrade pip
          pip install requests pandas

      - name: 1. Vérifier les prérequis (fichiers de stats)
        id: check_stats
        run: |
          echo "🔍 Vérification des fichiers de statistiques..."
          stats_file=""
          if [ -f "donnees/stats_equipes_2025.jsonl" ]; then
            stats_file="donnees/stats_equipes_2025.jsonl"
            echo "✅ Utilisation du fichier de stats 2025."
          elif [ -f "donnees/stats_equipes_2024.jsonl" ]; then
            stats_file="donnees/stats_equipes_2024.jsonl"
            echo "⚠️ Fichier 2025 non trouvé, utilisation du fallback 2024."
          else
            echo "❌ Aucun fichier de statistiques trouvé (stats_equipes_2025.jsonl ou _2024.jsonl)."
            echo "💡 Exécutez d'abord le workflow 'Générer Stats Équipes'."
            exit 1
          fi
          # Exporter la variable pour les étapes suivantes
          echo "stats_file_path=$stats_file" >> "$GITHUB_ENV"

      - name: 2. Préparer la source des matchs
        id: prepare_matches
        run: |
          # Par défaut, la source est celle de l'input ou 'existing' pour les lancements programmés
          if [ "${{ github.event_name }}" == "schedule" ]; then
            matchs_source="existing"
          else
            matchs_source="${{ github.event.inputs.matchs_source }}"
          fi
          
          echo "🎯 Stratégie initiale des matchs : $matchs_source"
          
          # Créer le répertoire de données s'il n'existe pas
          mkdir -p donnees

          # Logique de décision pour la source finale des matchs
          final_source="$matchs_source"
          
          if [ "$matchs_source" == "existing" ]; then
            echo "📁 Vérification du fichier 'donnees/matchs_du_jour.json'..."
            if [ -f "donnees/matchs_du_jour.json" ]; then
              # Vérifier que le fichier contient bien des matchs
              # Support both 'matchs' and 'fixtures' field names
              match_count=$(python3 -c "
              import json
              try:
                  with open('donnees/matchs_du_jour.json', 'r') as f:
                      data = json.load(f)
                  # Check for both possible field names
                  matches = data.get('matchs', data.get('fixtures', []))
                  print(len(matches))
              except Exception as e:
                  print(0)
              ")
              
              if [ "$match_count" -gt 0 ]; then
                echo "✅ Fichier existant valide trouvé avec $match_count matchs."
                
                # Convert fixtures to matchs format if needed
                python3 -c "
                import json
                with open('donnees/matchs_du_jour.json', 'r') as f:
                    data = json.load(f)
                
                # If using fixtures format, convert to expected matchs format
                if 'fixtures' in data and 'matchs' not in data:
                    converted_matches = []
                    for fixture in data['fixtures']:
                        converted_match = {
                            'team_a_id': fixture['home_team']['id'],
                            'team_b_id': fixture['away_team']['id'],
                            'commentaire': f\"{fixture['home_team']['name']} vs {fixture['away_team']['name']} ({fixture['league_name']})\"
                        }
                        converted_matches.append(converted_match)
                    
                    # Create new format
                    new_data = {
                        'source': 'existing-converted',
                        'matchs': converted_matches,
                        'original_count': len(data['fixtures']),
                        'converted_at': data.get('generated_at', 'unknown')
                    }
                    
                    # Backup original and write new format
                    with open('donnees/matchs_du_jour_original.json', 'w') as f:
                        json.dump(data, f, indent=2)
                    
                    with open('donnees/matchs_du_jour.json', 'w') as f:
                        json.dump(new_data, f, indent=2)
                    
                    print(f'✅ Converted {len(converted_matches)} fixtures to matchs format')
                "
              else
                echo "⚠️ Fichier existant est vide. Basculement en mode 'test'."
                final_source="test"
              fi
            else
              echo "⚠️ Fichier 'donnees/matchs_du_jour.json' non trouvé. Basculement en mode 'test'."
              final_source="test"
            fi
          fi

          if [ "$final_source" == "test" ]; then
            echo "🧪 Création d'un fichier de matchs de test..."
            echo '{
              "source": "test",
              "matchs": [
                {"team_a_id": 50, "team_b_id": 42, "commentaire": "Man City vs Arsenal"},
                {"team_a_id": 40, "team_b_id": 49, "commentaire": "Liverpool vs Chelsea"},
                {"team_a_id": 529, "team_b_id": 541, "commentaire": "Barcelona vs Real Madrid"}
              ]
            }' > donnees/matchs_du_jour.json
            echo "✅ Fichier de matchs de test créé."
          elif [ "$final_source" == "api" ]; then
            echo "🌐 Récupération des matchs via l'API..."
            # Remplacez cette section par l'appel à votre script de récupération API
            echo "⚠️ La logique de récupération API n'est pas implémentée. Utilisation d'un fichier de fallback."
            echo '{
              "source": "api-fallback",
              "matchs": [
                {"team_a_id": 157, "team_b_id": 165, "commentaire": "Bayern vs Dortmund"}
              ]
            }' > donnees/matchs_du_jour.json
          fi
          
          # Exporter la source finale utilisée pour le message de commit
          echo "final_match_source=$final_source" >> "$GITHUB_OUTPUT"

      - name: 3. Créer les seuils custom (si fournis)
        if: github.event.inputs.seuils_custom != ''
        run: |
          echo "🎛️ Création du fichier de seuils custom..."
          echo '${{ github.event.inputs.seuils_custom }}' > donnees/seuils_custom.json
          echo "✅ Fichier de seuils custom créé."

      - name: 4. Exécuter le moteur UltraSafe
        id: run_engine
        run: |
          echo "🚀 Lancement du moteur de paris UltraSafe..."
          # Construction des arguments pour le script
          args="--stats-file ${{ env.stats_file_path }}"
          args="$args --matchs-file donnees/matchs_du_jour.json"
          args="$args --output donnees/paris_du_jour.csv"
          args="$args --historique donnees/historique.csv"

          # Ajout des seuils custom s'ils existent
          if [ -f "donnees/seuils_custom.json" ]; then
            args="$args --seuils donnees/seuils_custom.json"
            echo "Inclusion des seuils custom."
          fi

          # Ajout du mode debug si activé
          if [ "${{ github.event.inputs.debug_mode }}" == "true" ]; then
            args="$args --debug"
            echo "🐛 Mode debug activé."
          fi

          echo "Commande: python3 scripts/moteur_paris_ultrasafe.py $args"
          python3 scripts/moteur_paris_ultrasafe.py $args

      - name: 5. Analyser les résultats
        if: always() && steps.run_engine.outcome == 'success'
        run: |
          echo "📊 Analyse des résultats..."
          if [ -f "donnees/paris_du_jour.csv" ]; then
            paris_count=$(tail -n +2 donnees/paris_du_jour.csv | wc -l)
            echo "✅ Fichier 'paris_du_jour.csv' généré avec $paris_count pari(s)."
            if [ "$paris_count" -gt 0 ]; then
              echo "📋 Aperçu des paris :"
              head -n 6 donnees/paris_du_jour.csv
            fi
          else
            echo "❌ Le fichier 'paris_du_jour.csv' n'a pas été généré."
            exit 1
          fi

      - name: 6. Sauvegarder les résultats dans le repository
        if: success()
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "🎰 Paris UltraSafe du $(date -u +%Y-%m-%d) | Source: ${{ steps.prepare_matches.outputs.final_match_source }}"
          file_pattern: "donnees/paris_du_jour.csv donnees/historique.csv"
          commit_user_name: "GitHub Action UltraSafe"
          commit_user_email: "action@github.com"

      - name: 7. Créer un artefact avec les résultats
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Paris-du-jour-${{ github.run_number }}
          path: |
            donnees/paris_du_jour.csv
            donnees/historique.csv
            donnees/matchs_du_jour.json
            donnees/matchs_du_jour_original.json
          retention-days: 7
