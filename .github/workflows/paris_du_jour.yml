name: Générer Paris du Jour UltraSafe

on:
  workflow_dispatch:
    inputs:
      matchs_source:
        description: "Source des matchs (test/api)"
        required: true
        default: "test"
        type: choice
        options:
          - test
          - api
      seuils_custom:
        description: "Seuils custom en JSON (optionnel)"
        required: false
        type: string
      debug_mode:
        description: "Mode debug verbose"
        required: false
        default: false
        type: boolean
  schedule:
    # Exécution automatique chaque jour à 8h UTC
    - cron: '0 8 * * *'

jobs:
  generer_paris:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: Configuration de Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Installer les dépendances
        run: |
          python -m pip install --upgrade pip
          pip install requests pandas # Ajout de pandas pour la validation

      - name: 1. Vérifier les prérequis (fichiers de stats)
        id: check_stats
        run: |
          echo "🔍 Vérification des fichiers de statistiques..."
          stats_file=""
          if [ -f "donnees/stats_equipes_2025.jsonl" ]; then
            stats_file="donnees/stats_equipes_2025.jsonl"
            echo "✅ Utilisation du fichier de stats 2025."
          elif [ -f "donnees/stats_equipes_2024.jsonl" ]; then
            stats_file="donnees/stats_equipes_2024.jsonl"
            echo "⚠️ Fichier 2025 non trouvé, utilisation du fallback 2024."
          else
            echo "❌ Aucun fichier de statistiques trouvé (stats_equipes_2025.jsonl ou _2024.jsonl)."
            echo "💡 Exécutez d'abord le workflow 'Générer Stats Équipes'."
            exit 1
          fi
          # Exporter la variable pour les étapes suivantes
          echo "stats_file_path=$stats_file" >> $GITHUB_ENV

      - name: 2. Préparer la source des matchs
        run: |
          # Si le workflow est déclenché par un schedule, on utilise 'api', sinon on prend l'input de l'utilisateur.
          if [ "${{ github.event_name }}" == "schedule" ]; then
            matchs_source="api"
          else
            matchs_source="${{ github.event.inputs.matchs_source }}"
          fi
          echo "🎯 Source des matchs sélectionnée : $matchs_source"
          echo "MATCHS_SOURCE=$matchs_source" >> $GITHUB_ENV

          if [ "$matchs_source" == "test" ]; then
            echo "🧪 Création du fichier de matchs de test..."
            mkdir -p donnees
            # Création d'un fichier JSON de test simple et valide
            echo '{
              "source": "test",
              "matchs": [
                {"team_a_id": 50, "team_b_id": 42, "commentaire": "Man City vs Arsenal"},
                {"team_a_id": 40, "team_b_id": 49, "commentaire": "Liverpool vs Chelsea"},
                {"team_a_id": 529, "team_b_id": 541, "commentaire": "Barcelona vs Real Madrid"}
              ]
            }' > donnees/matchs_du_jour.json
            echo "✅ Fichier de matchs de test créé."
          elif [ "$matchs_source" == "api" ]; then
            echo "🌐 Récupération des matchs via l'API..."
            # Simule l'appel à un script de récupération. Remplacez par votre vrai script.
            # python3 scripts/recuperer_matchs_jour.py --out donnees/matchs_du_jour.json
            echo "⚠️ Logique de récupération API à implémenter. Utilisation d'un fichier test en fallback."
            echo '{
              "source": "api-fallback",
              "matchs": [
                {"team_a_id": 157, "team_b_id": 165, "commentaire": "Bayern vs Dortmund"}
              ]
            }' > donnees/matchs_du_jour.json
          fi

      - name: 3. Créer les seuils custom (si fournis)
        if: github.event.inputs.seuils_custom != ''
        run: |
          echo "🎛️ Création du fichier de seuils custom..."
          echo '${{ github.event.inputs.seuils_custom }}' > donnees/seuils_custom.json
          echo "✅ Fichier de seuils custom créé."

      - name: 4. Exécuter le moteur UltraSafe
        id: run_engine
        run: |
          echo "🚀 Lancement du moteur de paris UltraSafe..."
          # Construction des arguments pour le script
          args="--stats-file ${{ env.stats_file_path }}"
          args="$args --matchs-file donnees/matchs_du_jour.json"
          args="$args --output donnees/paris_du_jour.csv"
          args="$args --historique donnees/historique.csv"

          # Ajout des seuils custom s'ils existent
          if [ -f "donnees/seuils_custom.json" ]; then
            args="$args --seuils donnees/seuils_custom.json"
            echo "Inclusion des seuils custom."
          fi

          # Ajout du mode debug si activé
          if [ "${{ github.event.inputs.debug_mode }}" == "true" ]; then
            args="$args --debug"
            echo "🐛 Mode debug activé."
          fi

          echo "Commande: python3 scripts/moteur_paris_ultrasafe.py $args"
          python3 scripts/moteur_paris_ultrasafe.py $args

      - name: 5. Analyser et afficher les résultats
        if: always() && steps.run_engine.outcome == 'success'
        run: |
          echo "📊 Analyse des résultats..."
          if [ -f "donnees/paris_du_jour.csv" ]; then
            echo "✅ Fichier 'paris_du_jour.csv' généré."
            echo "📋 Aperçu des 5 premiers paris :"
            head -n 6 donnees/paris_du_jour.csv | sed 's/$/,/' # Pour l'affichage
          else
            echo "❌ Le fichier 'paris_du_jour.csv' n'a pas été généré."
            exit 1
          fi
          if [ -f "donnees/historique.csv" ]; then
            echo "✅ Fichier 'historique.csv' mis à jour."
          fi

      - name: 6. Sauvegarder les résultats dans le repository
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "🎰 Paris UltraSafe du $(date -u +%Y-%m-%d)"
          file_pattern: "donnees/paris_du_jour.csv donnees/historique.csv"
          commit_user_name: "GitHub Action UltraSafe"
          commit_user_email: "action@github.com"
          commit_author: "GitHub Action UltraSafe <action@github.com>"

      - name: 7. Créer un artefact avec les résultats
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Paris-du-jour-${{ github.run_number }}
          path: |
            donnees/paris_du_jour.csv
            donnees/historique.csv
            donnees/matchs_du_jour.json
          retention-days: 7
