name: R√©cup√©rer Team IDs (ligues.yaml)

on:
  workflow_dispatch:
    inputs:
      season:
        description: "Saison (ex: 2025)"
        required: true
        default: "2025"
  push:
    paths:
      - ligues.yaml

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # Timeout global du job augment√©
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Installer d√©pendances
        run: |
          python -m pip install --upgrade pip
          pip install requests pyyaml

      - name: Test API (Quick check)
        env:
          RAPIDAPI_KEY: ${{ secrets.RAPIDAPI_KEY }}
        run: |
          echo "üß™ Test rapide de l'API..."
          python -c "
          import requests, os, json
          headers = {
              'X-RapidAPI-Key': os.getenv('RAPIDAPI_KEY'),
              'X-RapidAPI-Host': 'api-football-v1.p.rapidapi.com'
          }
          resp = requests.get('https://api-football-v1.p.rapidapi.com/v3/teams?league=39&season=${{ github.event.inputs.season || '2025' }}', headers=headers)
          print(f'‚úÖ Status: {resp.status_code}')
          if resp.status_code == 200:
              data = resp.json()
              print(f'‚úÖ Premier League: {data.get(\"results\", 0)} √©quipes trouv√©es')
          else:
              print(f'‚ùå Erreur: {resp.text[:100]}')
          "

      - name: R√©cup√©rer Team IDs
        timeout-minutes: 15  # Timeout plus g√©n√©reux
        env:
          RAPIDAPI_KEY: ${{ secrets.RAPIDAPI_KEY }}
          RAPIDAPI_HOST: api-football-v1.p.rapidapi.com
        run: |
          echo "üöÄ R√©cup√©ration des Team IDs..."
          echo "‚è±Ô∏è Timeout configur√©: 15 minutes"
          python scripts/recuperer_team_ids.py \
            --saison "${{ github.event.inputs.season || '2025' }}" \
            --entree ligues.yaml \
            --sortie donnees/team_ids.json

      - name: V√©rifier r√©sultats
        run: |
          if [ -f donnees/team_ids.json ]; then
            echo "‚úÖ Fichier team_ids.json g√©n√©r√©"
            echo "üìä Taille: $(wc -c < donnees/team_ids.json) bytes"
            echo "üìè Lignes: $(wc -l < donnees/team_ids.json)"
            
            # Compter les √©quipes avec jq si disponible, sinon grep simple
            if command -v jq &> /dev/null; then
              total_teams=$(jq '[.leagues[].teams_count] | add // 0' donnees/team_ids.json)
              echo "‚öΩ Total √©quipes (jq): $total_teams"
            else
              team_count=$(grep -o '"team_id"' donnees/team_ids.json | wc -l)
              echo "‚öΩ Total team_id trouv√©s: $team_count"
            fi
            
            echo ""
            echo "üìã D√©but du fichier JSON:"
            head -15 donnees/team_ids.json
            
            echo ""
            echo "üìã Fin du fichier JSON:"
            tail -10 donnees/team_ids.json
            
          else
            echo "‚ùå Fichier team_ids.json manquant"
            exit 1
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: team_ids_saison_${{ github.event.inputs.season || '2025' }}
          path: donnees/team_ids.json

      - name: Commit automatique
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if [ -n "$(git status --porcelain donnees/team_ids.json)" ]; then
            git add donnees/team_ids.json
            git commit -m "ü§ñ Mise √† jour Team IDs saison ${{ github.event.inputs.season || '2025' }} - $(date +'%Y-%m-%d %H:%M UTC')"
            git push
            echo "‚úÖ Changements commit√©es"
          else
            echo "‚ÑπÔ∏è Aucun changement d√©tect√©"
          fi
