name: Générer Paris du Jour UltraSafe

on:
  workflow_dispatch:
    inputs:
      seuils_custom:
        description: "Seuils custom en JSON (optionnel)"
        required: false
        type: string
      debug_mode:
        description: "Mode debug verbose"
        required: false
        default: false
        type: boolean
  schedule:
    - cron: '0 8 * * *'

env:
  PYTHONIOENCODING: utf-8

jobs:
  generer_paris:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: Configuration de Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Installer les dépendances
        run: |
          python -m pip install --upgrade pip
          pip install requests pandas python-dateutil pytz

      - name: Créer répertoire données
        run: mkdir -p donnees

      - name: Préparer les fichiers de stats
        id: find_stats
        run: |
          echo "🔍 Recherche des fichiers de stats disponibles..."
          
          # Lister tous les fichiers de stats disponibles
          available_files=""
          for year in 2025 2024 2023; do
            candidate="donnees/stats_equipes_${year}.jsonl"
            if [ -f "$candidate" ] && [ -s "$candidate" ]; then
              available_files="$available_files $candidate"
              echo "✅ Trouvé: $candidate ($(du -h "$candidate" | cut -f1))"
            else
              echo "❌ Manquant: $candidate"
            fi
          done
          
          if [ -z "$available_files" ]; then
            echo "❌ Aucun fichier de stats trouvé"
            exit 1
          fi
          
          # Utiliser le fichier 2025 comme principal, mais assurer qu'on a aussi 2024
          primary_file="donnees/stats_equipes_2025.jsonl"
          backup_file="donnees/stats_equipes_2024.jsonl"
          
          if [ -f "$primary_file" ] && [ -f "$backup_file" ]; then
            echo "✅ Configuration idéale: 2025 + 2024 disponibles"
            echo "stats_file=$primary_file" >> "$GITHUB_OUTPUT"
          elif [ -f "$backup_file" ]; then
            echo "⚠️ Utilisation du fichier 2024 uniquement"
            echo "stats_file=$backup_file" >> "$GITHUB_OUTPUT"
          elif [ -f "$primary_file" ]; then
            echo "⚠️ Utilisation du fichier 2025 uniquement (risqué si vide)"
            echo "stats_file=$primary_file" >> "$GITHUB_OUTPUT"
          else
            # Prendre le premier disponible
            first_file=$(echo $available_files | awk '{print $1}')
            echo "⚠️ Utilisation du fallback: $first_file"
            echo "stats_file=$first_file" >> "$GITHUB_OUTPUT"
          fi

      - name: Créer script de conversion
        run: |
          cat > convert_matches.py << 'EOF'
          import json
          import sys
          from datetime import datetime
          
          try:
              with open('donnees/matchs_du_jour.json', 'r', encoding='utf-8') as f:
                  data = json.load(f)
              
              if 'matchs' in data and isinstance(data['matchs'], list) and len(data['matchs']) > 0:
                  print(f"Fichier déjà converti avec {len(data['matchs'])} matchs")
                  sys.exit(0)
              
              fixtures = data.get('fixtures', [])
              if not fixtures:
                  print('Aucune fixture trouvée')
                  sys.exit(1)
              
              matchs = []
              for fixture in fixtures:
                  try:
                      home_name = fixture['home_team']['name']
                      away_name = fixture['away_team']['name']
                      league = fixture.get('league_name', 'Unknown')
                      commentaire = f"{home_name} vs {away_name} ({league})"
                      
                      match = {
                          'team_a_id': fixture['home_team']['id'],
                          'team_b_id': fixture['away_team']['id'],
                          'commentaire': commentaire
                      }
                      matchs.append(match)
                  except Exception as e:
                      print(f'Erreur fixture: {e}')
                      continue
              
              if not matchs:
                  print('Aucun match converti')
                  sys.exit(1)
              
              new_data = {
                  'source': 'converted',
                  'matchs': matchs,
                  'converted_at': datetime.now().isoformat(),
                  'original_count': len(fixtures)
              }
              
              with open('donnees/matchs_du_jour.json', 'w', encoding='utf-8') as f:
                  json.dump(new_data, f, indent=2, ensure_ascii=False)
              
              print(f'Converti {len(matchs)} matchs depuis {len(fixtures)} fixtures')
          
          except Exception as e:
              print(f'Erreur conversion: {e}')
              sys.exit(1)
          EOF

      - name: Convertir le fichier de matchs
        run: |
          if [ -f "donnees/matchs_du_jour.json" ]; then
            python3 convert_matches.py
          else
            echo "❌ Fichier donnees/matchs_du_jour.json introuvable"
            exit 1
          fi

      - name: Créer seuils custom si fournis
        if: github.event.inputs.seuils_custom != ''
        run: |
          echo '${{ github.event.inputs.seuils_custom }}' > donnees/seuils_custom.json
          echo "✅ Seuils custom créés"

      - name: Exécuter le moteur de paris
        run: |
          args="--stats-file ${{ steps.find_stats.outputs.stats_file }}"
          args="$args --matchs-file donnees/matchs_du_jour.json"
          args="$args --output donnees/paris_du_jour.csv"
          args="$args --historique donnees/historique.csv"

          # Ajouter le fichier 2024 comme fallback si disponible
          if [ -f "donnees/stats_equipes_2024.jsonl" ] && [ "${{ steps.find_stats.outputs.stats_file }}" != "donnees/stats_equipes_2024.jsonl" ]; then
            args="$args --fallback-stats donnees/stats_equipes_2024.jsonl"
            echo "📊 Ajout du fallback 2024"
          fi

          if [ -f "donnees/seuils_custom.json" ]; then
            args="$args --seuils donnees/seuils_custom.json"
          fi

          if [ "${{ github.event.inputs.debug_mode }}" == "true" ]; then
            args="$args --debug"
          fi

          echo "🚀 Exécution: python3 scripts/moteur_paris_ultrasafe.py $args"
          python3 scripts/moteur_paris_ultrasafe.py $args

      - name: Vérifier les résultats
        run: |
          if [ -f "donnees/paris_du_jour.csv" ]; then
            paris_count=$(tail -n +2 donnees/paris_du_jour.csv | wc -l)
            echo "✅ $paris_count paris générés"
            echo "📋 Aperçu:"
            head -n 5 donnees/paris_du_jour.csv
          else
            echo "❌ Aucun fichier de paris généré"
            exit 1
          fi

      - name: Sauvegarder les résultats
        if: success()
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "🎰 Paris du $(date -u +%Y-%m-%d)"
          file_pattern: "donnees/paris_du_jour.csv donnees/historique.csv"
          commit_user_name: "Paris UltraSafe Bot"
          commit_user_email: "bot@ultrasafe.paris"

      - name: Créer artefact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: paris-${{ github.run_number }}
          path: |
            donnees/paris_du_jour.csv
            donnees/historique.csv
          retention-days: 7
