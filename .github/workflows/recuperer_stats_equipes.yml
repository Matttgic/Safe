name: Récupérer Stats Équipes UltraSafe

on:
  workflow_dispatch:
    inputs:
      league_id:
        description: "ID Ligue spécifique (optionnel, ex: 39 pour Premier League)"
        required: false
        type: string
      limit:
        description: "Nombre max d'équipes à traiter (test)"
        required: false
        default: ""
        type: string
      pause:
        description: "Pause entre requêtes API (secondes)"
        required: false
        default: "2.0"
        type: string
  push:
    paths:
      - donnees/team_ids.json

jobs:
  stats:
    runs-on: ubuntu-latest
    timeout-minutes: 120  # 2 heures max (était 60)
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Installer dépendances
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Vérifier team_ids.json
        run: |
          if [ ! -f donnees/team_ids.json ]; then
            echo "❌ Fichier donnees/team_ids.json manquant"
            echo "💡 Exécutez d'abord le workflow 'Récupérer Team IDs'"
            exit 1
          fi
          
          echo "✅ team_ids.json trouvé"
          echo "📊 Taille: $(wc -c < donnees/team_ids.json) bytes"
          
          # Compter les équipes
          teams_count=$(python3 -c "
import json
with open('donnees/team_ids.json', 'r') as f:
    data = json.load(f)
total = sum(len(league.get('teams', [])) for league in data.get('leagues', []))
print(total)
")
          echo "⚽ Total équipes à traiter: $teams_count"

      - name: Test API rapide
        env:
          RAPIDAPI_KEY: ${{ secrets.RAPIDAPI_KEY }}
        run: |
          echo "🧪 Test endpoint /teams/statistics..."
          python3 -c "
import requests, os, sys
headers = {
    'X-RapidAPI-Key': os.getenv('RAPIDAPI_KEY'),
    'X-RapidAPI-Host': 'api-football-v1.p.rapidapi.com'
}
# Test avec Manchester City (team 50, Premier League)
try:
    resp = requests.get(
        'https://api-football-v1.p.rapidapi.com/v3/teams/statistics?league=39&season=2025&team=50',
        headers=headers,
        timeout=10
    )
    print(f'Status: {resp.status_code}')
    
    if resp.status_code == 200:
        data = resp.json()
        print(f'Results: {data.get(\"results\", 0)}')
        
        if data.get('response'):
            response_data = data['response']
            # Afficher la structure pour debug
            print(f'Response keys: {list(response_data.keys())}')
            
            # Tester goals
            goals = response_data.get('goals', {})
            if goals:
                print(f'Goals structure: {list(goals.keys())}')
                goals_for = goals.get('for', {})
                if goals_for and isinstance(goals_for, dict):
                    avg_data = goals_for.get('average', {})
                    if avg_data and isinstance(avg_data, dict):
                        avg_total = avg_data.get('total')
                        print(f'Goals for avg total: {avg_total}')
            
            # Tester possession
            possession = response_data.get('possession')
            print(f'Possession type/value: {type(possession)} = {possession}')
            
        else:
            print('No response data')
    else:
        print(f'Error {resp.status_code}: {resp.text[:300]}')
        
except Exception as e:
    print(f'Exception during API test: {e}')
    sys.exit(1)
"

      - name: Récupérer statistiques équipes
        env:
          RAPIDAPI_KEY: ${{ secrets.RAPIDAPI_KEY }}
        run: |
          echo "🚀 Récupération des statistiques équipes..."
          
          # S'assurer que le script est exécutable
          chmod +x scripts/recuperer_stats_equipes.py
          
          # Construction des arguments
          args="--teams-file donnees/team_ids.json --output donnees/stats_equipes.jsonl"
          
          if [ -n "${{ github.event.inputs.league_id }}" ]; then
            args="$args --league ${{ github.event.inputs.league_id }}"
            echo "🎯 Ligue spécifique: ${{ github.event.inputs.league_id }}"
          fi
          
          if [ -n "${{ github.event.inputs.limit }}" ] && [ "${{ github.event.inputs.limit }}" != "" ]; then
            args="$args --limit ${{ github.event.inputs.limit }}"
            echo "⚡ Limite: ${{ github.event.inputs.limit }} équipes"
          fi
          
          if [ -n "${{ github.event.inputs.pause }}" ]; then
            args="$args --pause ${{ github.event.inputs.pause }}"
            echo "⏸️ Pause: ${{ github.event.inputs.pause }}s"
          fi
          
          # Ajouter debug pour les 3 premières équipes si limite activée
          if [ -n "${{ github.event.inputs.limit }}" ] && [ "${{ github.event.inputs.limit }}" != "" ]; then
            limit_val=${{ github.event.inputs.limit }}
            if [ "$limit_val" -le 5 ]; then
              args="$args --debug"
              echo "🔍 Mode debug activé pour test"
            fi
          fi
          
          echo "📋 Commande: python3 scripts/recuperer_stats_equipes.py $args"
          
          # Exécuter le script
          python3 scripts/recuperer_stats_equipes.py $args

      - name: Analyser les résultats
        run: |
          if [ -f donnees/stats_equipes.jsonl ]; then
            echo "✅ Fichier stats_equipes.jsonl généré"
            echo "📊 Taille: $(wc -c < donnees/stats_equipes.jsonl) bytes"
            echo "📄 Lignes: $(wc -l < donnees/stats_equipes.jsonl)"
            
            # Analyser le contenu JSONL avec plus de détails
            python3 -c "
import json
import sys
from collections import Counter

total_teams = 0
with_stats = 0
without_stats = 0
leagues = set()
stats_counts = Counter()

try:
    with open('donnees/stats_equipes.jsonl', 'r') as f:
        for line_num, line in enumerate(f, 1):
            if line.strip():
                try:
                    record = json.loads(line)
                    total_teams += 1
                    leagues.add(record.get('league_id'))
                    
                    if record.get('raw_data_available', False):
                        with_stats += 1
                        # Compter les stats non-null
                        stats = record.get('stats', {})
                        non_null_stats = sum(1 for v in stats.values() if v is not None)
                        stats_counts[non_null_stats] += 1
                    else:
                        without_stats += 1
                        error = record.get('error', 'Unknown')
                        print(f'Team without stats: {record.get(\"team_name\")} - {error}')
                        
                except json.JSONDecodeError as e:
                    print(f'JSON error line {line_num}: {e}')

    print(f'\\n📈 ANALYSE DÉTAILLÉE:')
    print(f'📊 Total équipes traitées: {total_teams}')
    print(f'✅ Avec statistiques: {with_stats}')
    print(f'❌ Sans statistiques: {without_stats}')
    print(f'🏆 Ligues couvertes: {sorted(list(leagues))}')
    
    if stats_counts:
        print(f'\\n📋 Distribution des stats par équipe:')
        for count, teams in sorted(stats_counts.items(), reverse=True):
            print(f'  {count}/10 stats: {teams} équipes')
    
except Exception as e:
    print(f'❌ Erreur analyse: {e}')
    import traceback
    traceback.print_exc()
    sys.exit(1)
"
            
            echo ""
            echo "📋 Échantillon de données (premières 2 lignes):"
            head -2 donnees/stats_equipes.jsonl | while read line; do
              echo "$line" | python3 -m json.tool 2>/dev/null || echo "$line"
            done
            
            # Afficher les fichiers debug si présents
            if ls debug_raw_*.json 1> /dev/null 2>&1; then
              echo ""
              echo "🔍 Fichiers debug générés:"
              ls -la debug_raw_*.json
            fi
            
          else
            echo "❌ Fichier stats_equipes.jsonl manquant"
            
            # Vérifier si des fichiers intermédiaires existent
            echo "🔍 Fichiers présents dans le répertoire:"
            ls -la donnees/ || true
            
            # Vérifier les logs d'erreur
            echo "📋 Contenu stderr/stdout précédent:"
            tail -50 /dev/null || true
            
            exit 1
          fi

      - name: Upload artifacts (toujours exécuté)
        uses: actions/upload-artifact@v4
        if: always()  # Upload même en cas d'échec partiel
        with:
          name: stats_equipes_${{ github.run_number }}
          path: |
            donnees/stats_equipes.jsonl
            donnees/team_ids.json
            debug_raw_*.json
          retention-days: 7

      - name: Commit des résultats
        if: success()  # Seulement si tout s'est bien passé
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action UltraSafe"
          
          # Vérifier s'il y a des changements
          if [ -f donnees/stats_equipes.jsonl ] && [ -n "$(git status --porcelain donnees/stats_equipes.jsonl)" ]; then
            git add donnees/stats_equipes.jsonl
            
            # Message de commit avec détails
            teams_count=$(wc -l < donnees/stats_equipes.jsonl)
            timestamp=$(date -u +"%Y-%m-%d %H:%M UTC")
            
            if [ -n "${{ github.event.inputs.league_id }}" ]; then
              commit_msg="📊 Stats équipes UltraSafe - Ligue ${{ github.event.inputs.league_id }} ($teams_count équipes) - $timestamp"
            else
              commit_msg="📊 Stats équipes UltraSafe - Toutes ligues ($teams_count équipes) - $timestamp"
            fi
            
            git commit -m "$commit_msg"
            git push
            echo "✅ Statistiques commitées: $commit_msg"
          else
            echo "ℹ️ Aucun changement dans stats_equipes.jsonl à committer"
          fi
          
          # Nettoyer les fichiers debug temporaires
          rm -f debug_raw_*.json || true
